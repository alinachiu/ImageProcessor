package model.colorTransformation;

import model.IImage;
import model.IPixel;
import model.Pixel;

/**
 * The abstract class for image color transformations which contains shared properties between
 * diferent color transformation.
 */
public abstract class AColorTransformation implements IColorTransformation {

  protected double[][] colorTransformation;

  public void apply(IImage image) {
    IPixel[][] imageGrid = image.createPixels();

    for (int i = 0; i < imageGrid.length; i++) {
      for (int j = 0; i < imageGrid[i].length; j++) {
        imageGrid[i][j] = applyToEachPixel(new Pixel(imageGrid[i][j].getX(), imageGrid[i][j].getY(),
            imageGrid[i][j].getRed(), imageGrid[i][j].getGreen(), imageGrid[i][j].getBlue()));
      }
    }
  }

  protected IPixel applyToEachPixel(IPixel pix) {
    int[] rgb = {pix.getRed(), pix.getBlue(), pix.getGreen()};
    int[] result = new int[3];

    for (int i = 0; i < colorTransformation.length; i++) {
      for (int j = 0; j < rgb.length; j++) {
        result[i] += colorTransformation[i][j] * rgb[j];
      }
    }

    return new Pixel(pix.getX(), pix.getY(), result[0], result[1], result[2]);
  }
}
